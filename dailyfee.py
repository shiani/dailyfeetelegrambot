import time
import requests
import telebot
import jdatetime
import pytz
import json
from datetime import datetime

# Replace with your actual API code and Telegram Bot details
API_CODE = "029c97dd2ac8eeec238bdeb4ad17e3e1"  # Replace with your API code
GOLD_API_URL = f"http://nerkh-api.ir/api/{API_CODE}/gold/"
CURRENCY_API_URL = f"http://nerkh-api.ir/api/{API_CODE}/currency/"
TELEGRAM_BOT_TOKEN = "7427661797:AAFdk8nsNwhpzbjtSIyowe2cuII1Y4mJad0"
TELEGRAM_CHAT_ID = "-1002412585293"

# Initialize the Telebot instance
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

def get_current_jalali_datetime():
    """Get the current date and time in Tehran timezone and convert to Jalali."""
    tehran_tz = pytz.timezone("Asia/Tehran")
    now = datetime.now(tehran_tz)
    jalali_date = jdatetime.date.fromgregorian(date=now.date())
    jalali_date_str = f"{jalali_date.year}/{jalali_date.month:02d}/{jalali_date.day:02d}"
    time_str = now.strftime("%H:%M")
    return f" {time_str} - {jalali_date_str}"

def send_to_telegram(message):
    """Send a message to the specified Telegram chat using the bot."""
    try:
        bot.send_message(TELEGRAM_CHAT_ID, message, parse_mode="HTML")
        print("Message sent to Telegram!")
    except Exception as e:
        print(f"Error sending message to Telegram: {e}")

def load_previous_prices():
    """Load previous prices from a file."""
    try:
        with open("previous_prices.json", "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_previous_prices(prices):
    """Save current (displayed) prices to a file."""
    with open("previous_prices.json", "w") as file:
        json.dump(prices, file)

def format_number(number):
    """
    Format the number with commas as thousands separators.
    The API raw number is divided by 10 before formatting.
    """
    try:
        number = float(number) / 10
        return "{:,.0f}".format(number)
    except (ValueError, TypeError):
        return number


def format_message(gold_prices, currency_prices):
    """
    Format a message showing the prices.
    For each price, we calculate the displayed price (raw_value/10 rounded down to an int)
    and compare it with the previously stored displayed value.
    An emoji is added only if the displayed value has changed.
    """
    previous_prices = load_previous_prices()
    new_prices = {}

    jalali_datetime = get_current_jalali_datetime()
    message = f"<b>üóì ÿ™ÿßÿ±€åÿÆ Ÿà ÿ≤ŸÖÿßŸÜ:{jalali_datetime}</b>\n\nüèÖ <b>ŸÇ€åŸÖÿ™ ÿ∑ŸÑÿß Ÿà ÿßÿ±ÿ≤:</b>\n"

    gold_labels = {
        "geram18": "⁄Øÿ±ŸÖ€å €±€∏ ÿπ€åÿßÿ±",
        "geram24": "⁄Øÿ±ŸÖ€å €≤€¥ ÿπ€åÿßÿ±",
        "sekee_emami": "ÿ≥⁄©Ÿá ÿßŸÖÿßŸÖ€å",
        "seke_bahar": "ÿ≥⁄©Ÿá ÿ®Ÿáÿßÿ± ÿ¢ÿ≤ÿßÿØ€å",
        "nim": "ŸÜ€åŸÖ‚Äåÿ≥⁄©Ÿá",
        "rob": "ÿ±ÿ®ÿπ‚Äåÿ≥⁄©Ÿá",
        "gerami": "⁄Øÿ±ŸÖ€å",
        "mesghal": "ŸÖÿ´ŸÇÿßŸÑ",
        "ons": "ÿßŸàŸÜÿ≥ ÿ¨ŸáÿßŸÜ€å",
    }

    # Define proper emojis for gold items.
    # You can change these as you see fit.
    gold_emoji_map = {
        "geram18": "ü•á",
        "geram24": "ü•á",
        "sekee_emami": "ü™ô",
        "seke_bahar": "ü™ô",
        "nim": "ü™ô",
        "rob": "ü™ô",
        "gerami": "üí∞",
        "mesghal": "üíé",
        "ons": "‚öñÔ∏è",
    }

    important_currency_labels = {
        "USD": "ÿØŸÑÿßÿ± ÿ¢ŸÖÿ±€å⁄©ÿß",
        "EUR": "€åŸàÿ±Ÿà",
        "GBP": "ŸæŸàŸÜÿØ ÿßŸÜ⁄ØŸÑ€åÿ≥",
        "CAD": "ÿØŸÑÿßÿ± ⁄©ÿßŸÜÿßÿØÿß",
        "AUD": "ÿØŸÑÿßÿ± ÿßÿ≥ÿ™ÿ±ÿßŸÑ€åÿß",
    }

    other_currency_labels = {
        "AED": "ÿØÿ±ŸáŸÖ ÿßŸÖÿßÿ±ÿßÿ™",
        "TRY": "ŸÑ€åÿ± ÿ™ÿ±⁄©€åŸá",
        "CNY": "€åŸàÿßŸÜ ⁄Ü€åŸÜ",
        "SEK": "⁄©ÿ±ŸàŸÜ ÿ≥Ÿàÿ¶ÿØ",
        "DKK": "⁄©ÿ±ŸàŸÜ ÿØÿßŸÜŸÖÿßÿ±⁄©",
        "NOK": "⁄©ÿ±ŸàŸÜ ŸÜÿ±Ÿà⁄ò",
        "SAR": "ÿ±€åÿßŸÑ ÿπÿ±ÿ®ÿ≥ÿ™ÿßŸÜ",
        "QAR": "ÿ±€åÿßŸÑ ŸÇÿ∑ÿ±",
        "OMR": "ÿ±€åÿßŸÑ ÿπŸÖÿßŸÜ",
        "IQD": "ÿØ€åŸÜÿßÿ± ÿπÿ±ÿßŸÇ",
        "HKD": "ÿØŸÑÿßÿ± ŸáŸÜ⁄Ø‚Äå⁄©ŸÜ⁄Ø",
        "MYR": "ÿ±€åŸÜ⁄Ø€åÿ™ ŸÖÿßŸÑÿ≤€å",
        "GEL": "ŸÑÿßÿ±€å ⁄Øÿ±ÿ¨ÿ≥ÿ™ÿßŸÜ",
        "THB": "ÿ®ÿßÿ™ ÿ™ÿß€åŸÑŸÜÿØ",
        "SGD": "ÿØŸÑÿßÿ± ÿ≥ŸÜ⁄ØÿßŸæŸàÿ±",
        "AZN": "ŸÖŸÜÿßÿ™ ÿ¢ÿ∞ÿ±ÿ®ÿß€åÿ¨ÿßŸÜ",
        "INR": "ÿ±ŸàŸæ€åŸá ŸáŸÜÿØ",
        "NZD": "ÿØŸÑÿßÿ± ŸÜ€åŸàÿ≤ŸÑŸÜÿØ",
        "AFN": "ÿßŸÅÿ∫ÿßŸÜ€å ÿßŸÅÿ∫ÿßŸÜÿ≥ÿ™ÿßŸÜ",
        "BHD": "ÿØ€åŸÜÿßÿ± ÿ®ÿ≠ÿ±€åŸÜ",
        "RUB": "ÿ±Ÿàÿ®ŸÑ ÿ±Ÿàÿ≥€åŸá",
        "PKR": "ÿ±ŸàŸæ€åŸá Ÿæÿß⁄©ÿ≥ÿ™ÿßŸÜ",
        "AMD": "ÿØÿ±ÿßŸÖ ÿßÿ±ŸÖŸÜÿ≥ÿ™ÿßŸÜ",
        "SYP": "ŸÑ€åÿ± ÿ≥Ÿàÿ±€åŸá",
    }

    # Define proper emojis for currency items using country flags when applicable.
    currency_emojis = {
        "USD": "üá∫üá∏",
        "EUR": "üá™üá∫",
        "GBP": "üá¨üáß",
        "CAD": "üá®üá¶",
        "AUD": "üá¶üá∫",
        "AED": "üá¶üá™",
        "TRY": "üáπüá∑",
        "CNY": "üá®üá≥",
        "SEK": "üá∏üá™",
        "DKK": "üá©üá∞",
        "NOK": "üá≥üá¥",
        "SAR": "üá∏üá¶",
        "QAR": "üá∂üá¶",
        "OMR": "üá¥üá≤",
        "IQD": "üáÆüá∂",
        "HKD": "üá≠üá∞",
        "MYR": "üá≤üáæ",
        "GEL": "üá¨üá™",
        "THB": "üáπüá≠",
        "SGD": "üá∏üá¨",
        "AZN": "üá¶üáø",
        "INR": "üáÆüá≥",
        "NZD": "üá≥üáø",
        "AFN": "üá¶üá´",
        "BHD": "üáßüá≠",
        "RUB": "üá∑üá∫",
        "PKR": "üáµüá∞",
        "AMD": "üá¶üá≤",
        "SYP": "üá∏üáæ",
    }

    # Process gold prices.
    for key, label in gold_labels.items():
        raw_new_price = gold_prices.get(key, {}).get("current")
        try:
            new_display = int(float(raw_new_price) / 10)
        except (TypeError, ValueError):
            new_display = None

        old_display = previous_prices.get(key)
        if old_display is not None:
            try:
                old_display = int(old_display)
            except (ValueError, TypeError):
                old_display = None

        change_emoji = ""
        if old_display is not None and new_display is not None:
            if new_display > old_display:
                change_emoji = " ‚¨ÜÔ∏è"
            elif new_display < old_display:
                change_emoji = " ‚¨áÔ∏è"

        line_emoji = gold_emoji_map.get(key, "üí∞")
        message += f"{line_emoji} {label}: {format_number(raw_new_price)} ÿ™ŸàŸÖÿßŸÜ{change_emoji}\n"
        new_prices[key] = new_display
    message += "\n"

    for key, label in important_currency_labels.items():
        raw_new_price = currency_prices.get(key, {}).get("current")
        try:
            new_display = int(float(raw_new_price) / 10)
        except (TypeError, ValueError):
            new_display = None

        old_display = previous_prices.get(key)
        if old_display is not None:
            try:
                old_display = int(old_display)
            except (ValueError, TypeError):
                old_display = None

        change_emoji = ""
        if old_display is not None and new_display is not None:
            if new_display > old_display:
                change_emoji = " ‚¨ÜÔ∏è"
            elif new_display < old_display:
                change_emoji = " ‚¨áÔ∏è"

        line_emoji = currency_emojis.get(key, "üí±")
        message += f"{line_emoji} {label}: {format_number(raw_new_price)} ÿ™ŸàŸÖÿßŸÜ{change_emoji}\n"
        new_prices[key] = new_display

    message += "\n"
    for key, label in other_currency_labels.items():
        raw_new_price = currency_prices.get(key, {}).get("current")
        try:
            new_display = int(float(raw_new_price) / 10)
        except (TypeError, ValueError):
            new_display = None

        old_display = previous_prices.get(key)
        if old_display is not None:
            try:
                old_display = int(old_display)
            except (ValueError, TypeError):
                old_display = None

        change_emoji = ""
        if old_display is not None and new_display is not None:
            if new_display > old_display:
                change_emoji = " ‚¨ÜÔ∏è"
            elif new_display < old_display:
                change_emoji = " ‚¨áÔ∏è"
        line_emoji = currency_emojis.get(key, "üí±")
        message += f"{line_emoji} {label}: {format_number(raw_new_price)} ÿ™ŸàŸÖÿßŸÜ{change_emoji}\n"
        new_prices[key] = new_display
    save_previous_prices(new_prices)
    return message


def fetch_prices():
    """Fetch gold and currency prices from the API."""
    try:
        gold_response = requests.get(GOLD_API_URL)
        gold_response.raise_for_status()
        gold_prices = gold_response.json()["data"]["prices"]

        currency_response = requests.get(CURRENCY_API_URL)
        currency_response.raise_for_status()
        currency_prices = currency_response.json()["data"]["prices"]

        return gold_prices, currency_prices
    except requests.exceptions.RequestException as e:
        print(f"Error fetching API data: {e}")
        return None, None

def check_time_and_notify():
    """Check the time and send a message at 00, 15, 30, and 45 minutes past each hour."""
    tehran_tz = pytz.timezone("Asia/Tehran")
    
    while True:
        now = datetime.now(tehran_tz)
        hour, minute, weekday = now.hour, now.minute, now.weekday()
        
        # Send only between 9 AM and 8 PM and on Saturday to Wednesday (weekday 6,0,1,2,3)
        if 9 <= hour < 21:
            if minute in [0, 15, 30, 45]:
                gold_prices, currency_prices = fetch_prices()
                if gold_prices and currency_prices:
                    message = format_message(gold_prices, currency_prices)
                    send_to_telegram(message)
                    print(f"Message sent at {now.strftime('%H:%M:%S')} Tehran time")
        
        time.sleep(60 - now.second)

if __name__ == "__main__":
    check_time_and_notify()
